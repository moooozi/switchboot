name: Update Package Repository

on:
  workflow_call:
    inputs:
      tag:
        description: "Git tag to update repository for (e.g. v0.1.1)"
        required: true
        type: string
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to update repository for (e.g. v0.1.1)"
        required: true
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: update-repository
  cancel-in-progress: true

jobs:
  update-repository:
    name: Update Package Repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for GPG secrets
        id: secrets_check
        shell: bash
        run: |
          if [ -n "${{ secrets.GPG_PRIVATE_KEY }}" ]; then
            echo "have_gpg=true" >> $GITHUB_OUTPUT
          else
            echo "have_gpg=" >> $GITHUB_OUTPUT
          fi

      - name: Download linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-${{ inputs.tag }}
          path: artifacts

      - name: Download existing repository
        shell: bash
        run: |
          set -e
          echo "Downloading existing repository from GitHub Pages..."
          mkdir -p repo/rpm/x86_64
          mkdir -p repo/deb/pool/main/s/switchboot
          mkdir -p repo/deb/dists/stable/main/binary-amd64

          # Try to download existing packages (ignore failures for first release)
          echo "Attempting to download existing RPM packages..."
          # NOTE: Do NOT exclude repodata here. We need existing repodata when present
          # so we can update/merge repository metadata instead of replacing it.
          wget -r -np -nH --cut-dirs=1 -R "index.html*" \
            https://moooozi.github.io/switchboot/rpm/x86_64/ -P repo || echo "No existing RPM packages found (this is OK for first release)"

          echo "Attempting to download existing DEB packages..."
          wget -r -np -nH --cut-dirs=1 -R "index.html*" -A "*.deb" \
            https://moooozi.github.io/switchboot/deb/pool/main/s/switchboot/ -P repo || echo "No existing DEB packages found (this is OK for first release)"

      - name: Setup repository structure
        shell: bash
        run: |
          set -e
          echo "Adding new artifacts to repository structure..."

          echo "Copying new RPM packages..."
          if ls artifacts/*.rpm 1> /dev/null 2>&1; then
            cp artifacts/*.rpm repo/rpm/x86_64/
            echo "Added new RPM packages"
            ls -la repo/rpm/x86_64/*.rpm
          else
            echo "No new RPM packages found"
          fi

          echo "Copying new DEB packages..."
          if ls artifacts/*.deb 1> /dev/null 2>&1; then
            cp artifacts/*.deb repo/deb/pool/main/s/switchboot/
            echo "Added new DEB packages"
            ls -la repo/deb/pool/main/s/switchboot/*.deb
          else
            echo "No new DEB packages found"
          fi

          echo "Copying repository configuration files..."
          cp repo-config/switchboot.repo repo/rpm/
          cp repo-config/switchboot.list repo/deb/
          cp repo-config/index.html repo/index.html

          echo "Repository contents summary:"
          echo "RPM packages:"
          ls -la repo/rpm/x86_64/ || echo "No RPM directory"
          echo "DEB packages:"
          ls -la repo/deb/pool/main/s/switchboot/ || echo "No DEB directory"

      - name: Install system dependencies
        shell: bash
        run: |
          set -e
          echo "Installing repository management tools..."
          sudo apt-get update
          sudo apt-get install -y createrepo-c dpkg-dev apt-utils rpm

      - name: Export GPG public key
        if: steps.secrets_check.outputs.have_gpg == 'true'
        shell: bash
        run: |
          set -e
          echo "Setting up GPG and exporting public key..."
          # import private key so we can export the public part
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import

          # Export RPM-style ASCII public key for RPM consumers
          gpg --armor --export > repo/rpm/RPM-GPG-KEY-switchboot

          # Export an ASCII-armored public key and also produce a dearmored binary keyring
          # suitable for apt's signed-by usage
          gpg --armor --export > repo/deb/switchboot-archive-keyring.asc
          gpg --dearmor repo/deb/switchboot-archive-keyring.asc > repo/deb/switchboot-archive-keyring.gpg
          rm -f repo/deb/switchboot-archive-keyring.asc

          echo "GPG public key exported successfully"

      - name: Prune to keep last two versions
        shell: bash
        run: |
          set -e
          chmod +x scripts/prune_keep_two.sh
          ./scripts/prune_keep_two.sh repo || true

      - name: Generate RPM repository metadata
        shell: bash
        run: |
          set -e
          echo "Generating RPM repository metadata..."
          if ls repo/rpm/x86_64/*.rpm 1> /dev/null 2>&1; then
            # If repodata already exists (from previous published site) use --update
            # to merge new packages into existing metadata. Otherwise create fresh metadata.
            if [ -d "repo/rpm/x86_64/repodata" ]; then
              echo "Existing repodata found, updating repository metadata..."
              echo "--- repodata before update ---"
              ls -la repo/rpm/x86_64/repodata || true
              echo "--- repomd.xml (head) ---"
              head -n 40 repo/rpm/x86_64/repodata/repomd.xml || true
              createrepo_c --update repo/rpm/x86_64/
              echo "--- repodata after update ---"
              ls -la repo/rpm/x86_64/repodata || true
              echo "--- repomd.xml (head) after update ---"
              head -n 40 repo/rpm/x86_64/repodata/repomd.xml || true
            else
              echo "No existing repodata found, generating repository metadata..."
              createrepo_c repo/rpm/x86_64/
              echo "--- repodata after generation ---"
              ls -la repo/rpm/x86_64/repodata || true
              echo "--- repomd.xml (head) ---"
              head -n 40 repo/rpm/x86_64/repodata/repomd.xml || true
            fi
            echo "RPM repository metadata generated successfully"
          else
            echo "No RPM packages found, skipping metadata generation"
          fi

      - name: Generate DEB repository metadata
        shell: bash
        run: |
          set -e
          if ! ls repo/deb/pool/main/s/switchboot/*.deb 1> /dev/null 2>&1; then
            echo "No DEB packages found, skipping metadata generation"
            exit 0
          fi

          echo "Generating DEB repository metadata..."
          cd repo/deb

          # Ensure dists directories exist (prune may have removed empty dirs)
          mkdir -p dists/stable/main/binary-amd64

          # Use apt-ftparchive to generate Packages and Release files with correct formatting
          apt-ftparchive packages pool/main/s/switchboot > dists/stable/main/binary-amd64/Packages
          gzip -kf dists/stable/main/binary-amd64/Packages

          # Generate a Release file with proper checksums and sizes
          apt-ftparchive release dists/stable > dists/stable/Release

          echo "DEB repository metadata generated successfully"

      - name: Sign repository metadata
        if: steps.secrets_check.outputs.have_gpg == 'true'
        shell: bash
        run: |
          set -e
          echo "Setting up GPG for signing..."
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import

          # Sign RPM repository if it exists
          if [ -f "repo/rpm/x86_64/repodata/repomd.xml" ]; then
            echo "Signing RPM repository metadata..."
            gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --detach-sign --armor repo/rpm/x86_64/repodata/repomd.xml
            echo "RPM repository signed successfully"
          else
            echo "No RPM repository metadata found, skipping RPM signing"
          fi

          # Sign DEB repository if it exists
          if [ -f "repo/deb/dists/stable/Release" ]; then
            echo "Signing DEB repository metadata..."
            gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --clearsign --output repo/deb/dists/stable/InRelease repo/deb/dists/stable/Release
            gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
              --detach-sign --armor --output repo/deb/dists/stable/Release.gpg repo/deb/dists/stable/Release
            echo "DEB repository signed successfully"
          else
            echo "No DEB repository metadata found, skipping DEB signing"
          fi
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate directory indexes
        shell: bash
        run: |
          set -e
          echo "Generating final index.html files for repo/"
          node --version || true
          chmod +x scripts/generate_indexes.js || true
          node scripts/generate_indexes.js repo || true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload repository to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./repo

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
