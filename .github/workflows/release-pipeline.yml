name: Release Pipeline

on:
  push:
    branches:
      - release

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: release-pipeline
  cancel-in-progress: true

jobs:
  # prepare: read the release version from src-tauri/tauri.conf.json and expose as job outputs
  prepare:
    name: Prepare release version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Read version from tauri.conf.json
        id: get_version
        shell: bash
        run: |
          # Read version field from JSON and emit outputs
          ver=$(python -c "import json,sys;print(json.load(open('src-tauri/tauri.conf.json'))['version'])")
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "tag=v$ver" >> $GITHUB_OUTPUT

      - name: Check repository tags for existing or greater versions
        id: check_repo_tags
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.get_version.outputs.tag }}"

          # If FORCE_REPO_UPDATE exists in repo-config, emit a visible warning and skip the check
          if [ -f repo-config/FORCE_REPO_UPDATE ]; then
            echo "::warning::FORCE_REPO_UPDATE present in repo-config/ â€” forcing repo update. Consider removing this file after use."
            exit 0
          fi

          echo "Checking existing git tags for versions >= $TAG"
          if ! python3 scripts/check_tag_against_repo.py "$TAG"; then
            rc=$?
            echo "::error::Tag check failed with exit code ${rc}. An equal or higher tag may already exist in the repository."
            echo "To override and force the repository update, create the file 'repo-config/FORCE_REPO_UPDATE' in the repository root and re-run the workflow (use with caution)."
            exit $rc
          fi

  build-linux:
    needs: prepare
    uses: ./.github/workflows/linux-build.yml
    with:
      version: ${{ needs.prepare.outputs.version }}
    secrets: inherit

  build-windows:
    needs: prepare
    uses: ./.github/workflows/windows-build.yml
    with:
      version: ${{ needs.prepare.outputs.version }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-linux
      - build-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-${{ needs.prepare.outputs.version }}
          path: artifacts

      - name: Download windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts-${{ needs.prepare.outputs.version }}
          path: artifacts

      - name: Show artifacts
        run: ls -la artifacts || true

      - name: Collect files to sign
        id: collect_files
        shell: bash
        run: |
          files=$(find artifacts -type f -name "*.deb" -o -name "*.rpm" -o -name "*.exe" | tr '\n' ';' | sed 's/;$//')
          echo "files=$files" >> $GITHUB_OUTPUT
          echo "Files to sign: $files"

      - name: Sign artifacts with GPG
        if: steps.collect_files.outputs.files != ''
        uses: ./.github/actions/gpg-sign
        with:
          files: ${{ steps.collect_files.outputs.files }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Generate release body
        id: release_body
        shell: bash
        run: |
          # Construct GitHub Pages URL dynamically
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          PAGES_URL="https://${OWNER}.github.io/${REPO}"

          echo "Generating release body..."
          python3 scripts/generate_release_body.py artifacts "${{ needs.prepare.outputs.version }}" "$PAGES_URL" > release_body.md

          # Save to output for use in release creation
          echo "Release body generated successfully"
          cat release_body.md

      - name: Set git user for CI tagging
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Ensure tag exists (delete existing tag only)
        uses: ./.github/actions/create-tag
        with:
          tag: ${{ needs.prepare.outputs.tag }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: Switchboot ${{ needs.prepare.outputs.tag }}
          body_path: release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare release artifacts (exclude .asc files)
        id: prepare_release_files
        shell: bash
        run: |
          # Generate newline-separated list of files excluding .asc
          files=$(find artifacts -type f ! -name "*.asc" -printf '%p\n')
          echo "Files to upload to release:"
          echo "$files"
          # Save to output (newline-separated)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          files: ${{ steps.prepare_release_files.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts with signatures for repository update
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts-${{ needs.prepare.outputs.version }}
          path: artifacts/*
          retention-days: 7

  update-repository:
    needs:
      - prepare
      - create-release
    uses: ./.github/workflows/update-repository.yml
    with:
      version: ${{ needs.prepare.outputs.version }}
    secrets: inherit
