use std::fs::{self, File};
use std::io::Write;
use std::path::Path;

fn main() {
    if let Err(e) = generate_build_info() {
        eprintln!("Failed to generate build info: {}", e);
        std::process::exit(1);
    }

    // Continue with tauri build
    tauri_build::build();
}

fn generate_build_info() -> Result<(), String> {
    // Read tauri.conf.json from the crate root
    let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").map_err(|e| e.to_string())?;
    let tauri_conf_path = Path::new(&manifest_dir).join("tauri.conf.json");
    let contents =
        fs::read_to_string(&tauri_conf_path).map_err(|e| format!("Read error: {}", e))?;

    // Parse JSON
    let v: serde_json::Value =
        serde_json::from_str(&contents).map_err(|e| format!("JSON parse error: {}", e))?;

    let identifier = v
        .get("identifier")
        .and_then(|s| s.as_str())
        .unwrap_or("unknown.identifier");
    let product_name = v
        .get("productName")
        .and_then(|s| s.as_str())
        .unwrap_or("Unknown");
    let version = v.get("version").and_then(|s| s.as_str()).unwrap_or("0.0.0");

    // Write generated file into OUT_DIR (like your named_pipe_ipc example)
    let out_dir = std::env::var_os("OUT_DIR").ok_or_else(|| "OUT_DIR not set".to_string())?;
    let dest_path = Path::new(&out_dir).join("app_build_info.rs");
    let mut f = File::create(&dest_path).map_err(|e| format!("Create file error: {}", e))?;

    write!(f, "// Auto-generated by build.rs - do not edit\n").map_err(|e| e.to_string())?;
    write!(
        f,
        "#[allow(dead_code)] pub const APP_IDENTIFIER: &str = \"{}\";\n",
        identifier
    )
    .map_err(|e| e.to_string())?;
    write!(
        f,
        "#[allow(dead_code)] pub const APP_NAME: &str = \"{}\";\n",
        product_name
    )
    .map_err(|e| e.to_string())?;
    write!(
        f,
        "#[allow(dead_code)] pub const APP_VERSION: &str = \"{}\";\n",
        version
    )
    .map_err(|e| e.to_string())?;
    write!(
        f,
        "#[allow(dead_code)] pub const APP_IDENTIFIER_VERSION: &str = \"{}-{}\";\n",
        identifier, version
    )
    .map_err(|e| e.to_string())?;

    // Re-run if tauri.conf.json changes
    println!("cargo:rerun-if-changed={}", tauri_conf_path.display());
    Ok(())
}
